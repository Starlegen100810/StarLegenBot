# -*- coding: utf-8 -*-
# Forces checkout wizard to use ReplyKeyboard (bottom menu) + text handlers
# Safe add-on: doesn't break your existing inline buttons; just prefers reply kb.

from telebot import types

BTN_HOME = "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"
BTN_BACK = "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨"
BTN_CANCEL = "‚ùå ’â’•’≤’°÷Ä’Ø’•’¨"
BTN_NEXT = "‚û°Ô∏è ’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨’ù ‘±÷É’∏"
BTN_COUNTRY = "üåç ‘µ÷Ä’Ø’´÷Ä"
BTN_CITY = "üìç ’Ñ’°÷Ä’¶ / ÷Ñ’°’≤’°÷Ñ"
BTN_STREET = "üè† ’ì’∏’≤’∏÷Å, ’∑’•’∂÷Ñ"
BTN_APT = "üè¢ ‘≤’∂’°’Ø’°÷Ä’°’∂ / ’¥’∏÷Ç’ø÷Ñ"
BTN_FULLNAME = "üë§ ‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂"
BTN_PHONE = "üìû ’Ä’•’º’°’≠’∏’Ω"
BTN_ATTACH_CONTACT = "üìá ‘ø÷Å’•’¨ ’Ø’∏’∂’ø’°’Ø’ø"
BTN_ATTACH_LOCATION = "üìå ‘ø÷Å’•’¨ ’ø’•’≤’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂"

def _kb_rows(*rows):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for r in rows:
        kb.row(*r) if isinstance(r, (list, tuple)) else kb.row(r)
    return kb

def wizard_kb():
    return _kb_rows(
        [BTN_COUNTRY, BTN_CITY],
        [BTN_STREET, BTN_APT],
        [BTN_FULLNAME, BTN_PHONE],
        [BTN_ATTACH_CONTACT, BTN_ATTACH_LOCATION],
        [BTN_CANCEL, BTN_BACK],
    )

def nav_kb():
    return _kb_rows([BTN_BACK, BTN_HOME])

def _match(txt, *keys):
    if not isinstance(txt, str):
        return False
    low = txt.lower()
    return any(k in low for k in keys)

def register(bot, ctx):
    SHOP_STATE = ctx["shop_state"]
    resolve_lang = ctx["resolve_lang"]

    # put a small hook for any message that opens checkout (if your PU06 starts it differently, it's still ok)
    # we only supply reply-kb during address/name/phone steps.
    def _ensure_chk(uid: int):
        st = SHOP_STATE.setdefault(uid, {})
        chk = st.setdefault("checkout", {"step": None, "data": {}, "await": None})
        chk.setdefault("data", {}).setdefault("address", {})
        return chk

    # ‚Äî‚Äî‚Äî render helpers (reply keyboard) ‚Äî‚Äî‚Äî
    def ask_free_text(chat_id: int, label: str):
        bot.send_message(
            chat_id,
            label + "\n\n‚ÑπÔ∏è ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’°’¶’°’ø ’ø’•÷Ñ’Ω’ø’∏’æ ÷á ’Ø’Ø’°’∫’•’¥ ’§’°’∑’ø’´’∂÷â",
            reply_markup=wizard_kb(),
            parse_mode=None
        )

    # ‚Äî‚Äî‚Äî OPEN REPLY-WIZARD UI WHEN CHECKOUT IS RUNNING ‚Äî‚Äî‚Äî
    @bot.message_handler(func=lambda m: _match(m.text, "’∑’°÷Ä’∏÷Ç’∂’°’Ø", "’°’∑’≠’°’ø’•÷Å’´", "’°’∫’°") or _match(m.text, "checkout"))
    def _noop_continue(m):
        # This exists just to avoid "fallback" stealing the focus; real FSM is in PU06/PU09.
        pass

    # ’î’°’µ’¨’°’µ’´’∂ ’Ø’∏’≥’°’Ø’∂’•÷Ä ‚Üí ’Ω’∫’°’Ω’•’¨ ’°’¶’°’ø ’ø’•÷Ñ’Ω’ø
    @bot.message_handler(func=lambda m: m.text in {
        BTN_COUNTRY, BTN_CITY, BTN_STREET, BTN_APT, BTN_FULLNAME, BTN_PHONE
    })
    def _await_text(m):
        uid = m.from_user.id
        chk = _ensure_chk(uid)
        mapping = {
            BTN_COUNTRY: ("country", "üåç ‘≥÷Ä’•÷Ñ ’•÷Ä’Ø’´÷Ä’® (÷Ö÷Ä. ’Ä’°’µ’°’Ω’ø’°’∂)"),
            BTN_CITY: ("city", "üìç ‘≥÷Ä’•÷Ñ ’¥’°÷Ä’¶/÷Ñ’°’≤’°÷Ñ’® (÷Ö÷Ä. ‘µ÷Ä÷á’°’∂)"),
            BTN_STREET: ("street", "üè† ‘≥÷Ä’•÷Ñ ÷É’∏’≤’∏÷Å’∂ ’∏÷Ç ’∑’•’∂÷Ñ’® (÷Ö÷Ä. ’ç’°÷Ä’µ’°’∂ 10)"),
            BTN_APT: ("apt", "üè¢ ‘≥÷Ä’•÷Ñ ’¢’∂’°’Ø’°÷Ä’°’∂ / ’¥’∏÷Ç’ø÷Ñ / ’∞’°÷Ä’Ø"),
            BTN_FULLNAME: ("fullname", "üë§ ‘≥÷Ä’•÷Ñ ‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂"),
            BTN_PHONE: ("phone", "üìû ‘≥÷Ä’•÷Ñ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä (+374...)"),
        }
        key, label = mapping[m.text]
        chk["await"] = key
        ask_free_text(m.chat.id, label)

    # location/contact attach (’®’Ω’ø ÷Å’°’∂’Ø’∏÷Ç’©’µ’°’∂ ÷Ñ’∏ PU09-’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•’Ω ’°’µ’Ω ’°÷Ä’™’•÷Ñ’∂’•÷Ä’∏’æ ’°’∑’≠’°’ø’•÷Å’∂’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥)
    @bot.message_handler(content_types=["contact"])
    def _got_contact(m):
        uid = m.from_user.id
        chk = _ensure_chk(uid)
        c = m.contact
        if not c: return
        chk["data"]["contact"] = {
            "phone": c.phone_number,
            "name": (c.first_name or "") + (" " + c.last_name if c.last_name else "")
        }
        bot.send_message(m.chat.id, "‚úÖ ‘ø’∏’∂’ø’°’Ø’ø’® ’Ø÷Å’æ’•÷Å÷â", reply_markup=wizard_kb(), parse_mode=None)

    @bot.message_handler(content_types=["location"])
    def _got_loc(m):
        uid = m.from_user.id
        chk = _ensure_chk(uid)
        loc = m.location
        if not loc: return
        chk["data"]["location"] = {"lat": loc.latitude, "lon": loc.longitude}
        bot.send_message(m.chat.id, "‚úÖ ’è’•’≤’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’Ø÷Å’æ’•÷Å÷â", reply_markup=wizard_kb(), parse_mode=None)

    # ’ç’∫’°’Ω’æ’°’Æ ’°’¶’°’ø ’ø’•÷Ñ’Ω’ø’® ’∫’°’∞’•’¨ ’ø’æ’µ’°’¨ ’§’°’∑’ø’∏÷Ç’¥
    @bot.message_handler(func=lambda m: True, content_types=["text"])
    def _freefill(m):
        uid = m.from_user.id
        st = SHOP_STATE.get(uid, {})
        chk = st.get("checkout")
        if not chk or not chk.get("await"):
            return  # ’∏÷Ç÷Ä’´’∑ ’∞’•’∂’§’¨’•÷Ä’∂’•÷Ä’® ’©’∏’≤ ’°’∑’≠’°’ø’•’∂

        key = chk["await"]
        val = (m.text or "").strip()
        if key in {"country", "city", "street", "apt", "fullname", "phone"}:
            addr = chk["data"].setdefault("address", {})
            if key in {"country", "city", "street", "apt"}:
                addr[key] = val
            else:
                chk["data"][key] = val
            chk["await"] = None
            bot.send_message(m.chat.id, "‚úÖ ’ä’°’∞’æ’•÷Å÷â ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’¨ ’Ø’°’¥ ’¨÷Ä’°÷Å’∂’•’¨ ’¥’µ’∏÷Ç’Ω ’§’°’∑’ø’•÷Ä’®÷â",
                             reply_markup=wizard_kb(), parse_mode=None)

    # Cancel / Back (’∞’°’∂’±’∂’•’¨ ÷Ñ’∏ PU06/PU47 guard-’´’∂, ’¢’°’µ÷Å reply-kb ’π’∫’°’Ø’°’Ω’´)
    @bot.message_handler(func=lambda m: m.text in {BTN_CANCEL, BTN_BACK})
    def _cancel_back(m):
        uid = m.from_user.id
        st = SHOP_STATE.setdefault(uid, {})
        if m.text == BTN_CANCEL:
            st.pop("checkout", None)
            bot.send_message(m.chat.id, "‚ùå ’â’•’≤’°÷Ä’Ø’æ’•÷Å÷â", reply_markup=nav_kb(), parse_mode=None)
        else:
            # back just shows navigation kb; ’´÷Ä’°’Ø’°’∂ ÷Ñ’°’µ’¨’°÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’® ’©’∏’≤ ’°’∂’∏÷Ç’¥ ’ß ÷Ñ’∏ PU06 FSM-’®
            bot.send_message(m.chat.id, "üîô ’é’•÷Ä’°’§’°÷Ä’±÷â", reply_markup=nav_kb(), parse_mode=None)

    # ‘µ÷Ä’¢ checkout FSM-’® ’¢’°÷Å’æ’∏÷Ç’¥ ’ß (÷Ñ’∏ PU06-’∏÷Ç’¥), ’Ø’°÷Ä’∏’≤ ’•’Ω ÷Å’°’∂’Ø’°÷Å’°’Æ ’∫’°’∞’´ ÷Å’∏÷Ç’µ÷Å ’ø’°’¨ reply-kb-’∂’ù
    # bot.send_message(chat_id, "‘º÷Ä’°÷Å÷Ä’∏÷Ç ’§’°’∑’ø’•÷Ä’® üëá", reply_markup=wizard_kb(), parse_mode=None)
