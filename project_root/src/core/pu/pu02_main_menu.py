# -*- coding: utf-8 -*-
# src/core/pu/pu02_main_menu.py ‚Äî Main menu (HY/RU/EN) + home/back + placeholders

from telebot import types

LABELS = {
    "hy": {
        "shop": "üõç ‘Ω’°’∂’∏÷Ç’©", "cart": "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤",
        "profile": "üë§ ‘ª’¥ ’ß’ª", "leaders": "üèÜ ‘º’°’æ’°’£’∏÷Ç’µ’∂’∂’•÷Ä",
        "fin": "üí± ’ñ’´’∂’°’∂’Ω’°’Ø’°’∂’∂’•÷Ä", "analytics": "üìä ’ï÷Ä’æ’° ’Ø’∏÷Ä’∫’∏",
        "support": "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø", "partners": "ü§ù ‘≥’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä",
        "search": "üîé ’à÷Ä’∏’∂’•’¨", "invite": "ü§ù ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´",
        "lang": "üåê ‘º’•’¶’∏÷Ç", "back": "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", "home": "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç",
        "menu_title": "üìã ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â",
        "ph": {
            "profile": "üë§ ¬´‘ª’¥ ’ß’ª¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "leaders": "üèÜ ¬´‘º’°’æ’°’£’∏÷Ç’µ’∂’∂’•÷Ä¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "fin": "üí± ¬´’ñ’´’∂’°’∂’Ω’°’Ø’°’∂’∂’•÷Ä¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "analytics": "üìä ¬´’ï÷Ä’æ’° ’Ø’∏÷Ä’∫’∏¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "support": "üí¨ ¬´‘ø’°’∫ ’¥’•’¶ ’∞’•’ø¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "partners": "ü§ù ¬´‘≥’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "search": "üîé ¬´’à÷Ä’∏’∂’•’¨¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "invite": "ü§ù ¬´’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´¬ª ’∑’∏÷Ç’ø’∏’æ÷â",
            "lang": "üåê ‘º’•’¶’∏÷Ç’∂ ÷É’∏’≠’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’æ’´÷Ä /start-’´÷Å÷â",
        }
    },
    "ru": {
        "shop": "üõç –ú–∞–≥–∞–∑–∏–Ω", "cart": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
        "profile": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "leaders": "üèÜ –õ–∏–¥–µ—Ä—ã",
        "fin": "üí± –§–∏–Ω–∞–Ω—Å—ã", "analytics": "üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç",
        "support": "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "partners": "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã",
        "search": "üîé –ü–æ–∏—Å–∫", "invite": "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
        "lang": "üåê –Ø–∑—ã–∫", "back": "üîô –ù–∞–∑–∞–¥", "home": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "menu_title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        "ph": {
            "profile": "üë§ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª —Å–∫–æ—Ä–æ.",
            "leaders": "üèÜ ¬´–õ–∏–¥–µ—Ä—ã¬ª —Å–∫–æ—Ä–æ.",
            "fin": "üí± ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª —Å–∫–æ—Ä–æ.",
            "analytics": "üìä ¬´–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç¬ª —Å–∫–æ—Ä–æ.",
            "support": "üí¨ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª —Å–∫–æ—Ä–æ.",
            "partners": "ü§ù ¬´–ü–∞—Ä—Ç–Ω—ë—Ä—ã¬ª —Å–∫–æ—Ä–æ.",
            "search": "üîé ¬´–ü–æ–∏—Å–∫¬ª —Å–∫–æ—Ä–æ.",
            "invite": "ü§ù ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π¬ª —Å–∫–æ—Ä–æ.",
            "lang": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /start.",
        }
    },
    "en": {
        "shop": "üõç Shop", "cart": "üõí Cart",
        "profile": "üë§ Profile", "leaders": "üèÜ Leaders",
        "fin": "üí± Finances", "analytics": "üìä Daily stats",
        "support": "üí¨ Support", "partners": "ü§ù Partners",
        "search": "üîé Search", "invite": "ü§ù Invite friends",
        "lang": "üåê Language", "back": "üîô Back", "home": "üè† Main menu",
        "menu_title": "üìã Main menu.",
        "ph": {
            "profile": "üë§ ‚ÄúProfile‚Äù coming soon.",
            "leaders": "üèÜ ‚ÄúLeaders‚Äù coming soon.",
            "fin": "üí± ‚ÄúFinances‚Äù coming soon.",
            "analytics": "üìä ‚ÄúDaily stats‚Äù coming soon.",
            "support": "üí¨ ‚ÄúSupport‚Äù coming soon.",
            "partners": "ü§ù ‚ÄúPartners‚Äù coming soon.",
            "search": "üîé ‚ÄúSearch‚Äù coming soon.",
            "invite": "ü§ù ‚ÄúInvite friends‚Äù coming soon.",
            "lang": "üåê Change language via /start.",
        }
    },
}

def _L(lang: str): return LABELS.get(lang, LABELS["hy"])

def main_menu_keyboard(lang: str = "hy") -> types.ReplyKeyboardMarkup:
    L = _L(lang)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(L["shop"], L["cart"])
    kb.row(L["profile"], L["leaders"])
    kb.row(L["fin"], L["analytics"])
    kb.row(L["support"], L["partners"])
    kb.row(L["search"], L["invite"])
    kb.row(L["lang"], L["back"], L["home"])
    return kb

def register(bot, ctx):
    resolve_lang = ctx["resolve_lang"]
    remember_msg = ctx.get("remember_msg")
    cleanup_msgs = ctx.get("cleanup_bot_msgs")
    shop_state   = ctx["shop_state"]

    # ’ø÷Ä’°’¥’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ PU01-’´’∂
    ctx["main_menu_keyboard"] = main_menu_keyboard

    def _home(chat_id, uid):
        kb = main_menu_keyboard(resolve_lang(uid))
        remember_msg(uid, bot.send_message(chat_id, _L(resolve_lang(uid))["menu_title"], reply_markup=kb))

    # Home
    @bot.message_handler(func=lambda m: isinstance(getattr(m,"text",None), str)
                         and any(m.text.strip()==LABELS[l]["home"] for l in LABELS))
    def __home(m):
        uid = m.from_user.id
        cleanup_msgs(m.chat.id, uid)
        _home(m.chat.id, uid)

    # Back ‚Üí ’¥’´’∂’π FSM’ù ’ø’∏÷Ç’∂
    @bot.message_handler(func=lambda m: isinstance(getattr(m,"text",None), str)
                         and any(m.text.strip()==LABELS[l]["back"] for l in LABELS))
    def __back(m):
        uid = m.from_user.id
        cleanup_msgs(m.chat.id, uid)
        _home(m.chat.id, uid)

    # Cart ‚Üí ’¢’°÷Å’∏÷Ç’¥ ’•’∂÷Ñ PU05 UI-’∂, ’•’©’• ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß
    @bot.message_handler(func=lambda m: isinstance(getattr(m,"text",None), str)
                         and any(m.text.strip()==LABELS[l]["cart"] for l in LABELS))
    def __cart(m):
        uid = m.from_user.id
        api = shop_state.setdefault("api", {})
        show = api.get("cart_ui") or api.get("cart_ui_show")
        if callable(show):
            try:
                if getattr(show, "__code__", None) and show.__code__.co_argcount >= 2:
                    show(bot, m)         # (bot, message)
                else:
                    show(m.chat.id)      # (chat_id)
            except Exception as e:
                remember_msg(uid, bot.send_message(m.chat.id, f"‚ö†Ô∏è Cart UI error: {e}", reply_markup=main_menu_keyboard(resolve_lang(uid))))
        else:
            remember_msg(uid, bot.send_message(m.chat.id, "üõí Cart UI ’§’•’º ’¥’´’°÷Å’æ’°’Æ ’π’ß÷â", reply_markup=main_menu_keyboard(resolve_lang(uid))))

    # ’Ñ’∂’°÷Å’°’Æ ’Ø’∏’≥’°’Ø’∂’•÷Ä’´ placeholder (’¥’•’∂’µ’∏÷Ç’∂ ’π’´ ’Ø’∏÷Ä’π’∏÷Ç’¥)
    def _ph(key, msg_key):
        @bot.message_handler(func=lambda m: isinstance(getattr(m,"text",None), str)
                             and any(m.text.strip()==LABELS[l][key] for l in LABELS))
        def _(m):
            uid = m.from_user.id
            lang = resolve_lang(uid)
            txt = _L(lang)["ph"][msg_key]
            remember_msg(uid, bot.send_message(m.chat.id, txt, reply_markup=main_menu_keyboard(lang)))
        return _
    _ph("profile","profile"); _ph("leaders","leaders")
    _ph("fin","fin"); _ph("analytics","analytics")
    _ph("support","support"); _ph("partners","partners")
    _ph("search","search"); _ph("invite","invite")
    _ph("lang","lang")

def healthcheck(_): return True
